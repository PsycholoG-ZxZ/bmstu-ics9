(define (selection-sort pred? ls) ;найти мин/макс - ставим 1 место и т.д.
  (define (helper xs select)
    (if (null? xs)
        select
        (if (pred? select (car xs))
            (helper (cdr xs) select)
            (helper (cdr xs) (car xs)))))
  ;(helper ls '())) select = значение
  (define (helper2 xss fin-xss)
     (if (null? xss)
         (reverse fin-xss)
         (let ((select (helper (cdr xss) (car xss))))
           (helper2 (delete xss select) ;удалили найденный мин/макс
                    (cons select fin-xss)))))
  (helper2 ls '()))

(define (delete xs symb)
  (if (null? xs)
      '()
      (if (equal? (car xs) symb)
          (cdr xs)
          (cons (car xs) (delete (cdr xs) symb)))))

;(define (analyzer pred? xs res)
;  (if (null? xs)
;      (list res)
;      (if (null? (cdr xs))
;          (cons (car xs) res)
;          (if (pred? res (car xs))
;              (cons res xs)
 ;             (cons (car xs)
 ;                   (analyzer pred? (cdr xs) res))))))
(define (insertion-sort pred? xs)
(define (analyzer pred? xs res)
  (cond ((null? xs) (list res))
        ;((null? (cdr xs)) (cons (car xs) res))
        ((pred? res (car xs)) (cons res xs))
        (else (cons (car xs)
                    (analyzer pred? (cdr xs) res)))))
(define (help-to-analyz xss fin-xss)
  (if (null? xss)
      fin-xss
      (help-to-analyz (cdr xss) (analyzer pred? fin-xss (car xss)))))
  (help-to-analyz xs '()))
;(selection-sort <= '(9 6 2 4 3 5 7 1 8 0)) ; (0 1 2 3 4 5 6 7 8 9)
;(insertion-sort <= '(9 6 2 4 3 5 7 1 8 0)) ; (0 1 2 3 4 5 6 7 8 9)